################################################################################
#  << PYMAC-IV FUNCTION SETUP >>
#    @ID      : L_FUNCTION.ENV
################################################################################
#-------------------------------------------------------------------------------
#@SEE < SYSTEM OWNER CODE SETTING FUNCTION SETUP >
#@SEE   1.F_SYS_OWNER  : System Owner Code Setting Function
#@SEE        argument  : $1 = Base
#-------------------------------------------------------------------------------
function F_SYS_OWNER() {

    local L_OPE_BASE=$1

    L_OPE_BASE=`echo $L_OPE_BASE | tr '[a-z]' '[A-Z]'`
    case $L_OPE_BASE in
        STD)
             echo "0000"
             ;;
        YMC)
             echo "0000"
             ;;
        XMTEST)
             echo "6666"
             ;;
        APP)
             echo "APP1"
             ;;
        MRP)
             echo "MRPS"
             ;;
        ICST)
             echo "ICST"
             ;;
        LBOM)
             echo "LBOM"
             ;;
        PUR)
             echo "LHT1"
             ;;
        IA)
             echo "IAJP"
             ;;
        CC)
             echo "8888"
             ;;
        LPNC)
             echo "LPNC"
             ;;
        SCP)
             echo "SCPT"
             ;;
		YMPC)
             echo "7175"
             ;;
    esac

####    ## < ACTION LOG OUTPUT >
####    F_ACTION_LOG
}

#-------------------------------------------------------------------------------
#@SEE < ACTION LOG FUNCTION SETUP >
#-------------------------------------------------------------------------------
function F_ACTION_LOG() {

    local L_ACTION_DATE
    local L_ACTION_DTIME
    local L_ACTION_LOG_FILE
    local L_ACTION_LOG_FPATH

    ## < LOG FILE SETUP >
    L_ACTION_DATE=`date +%Y%m%d`
    L_ACTION_DTIME=`date '+%Y-%m-%d %T'`
#    L_ACTION_LOG_PATH=$L_P4DIR_BASE"/action_log"
#    L_ACTION_LOG_FILE="action_log."$L_ACTION_DATE
#    L_ACTION_LOG_FPATH=$L_ACTION_LOG_PATH"/"$L_ACTION_LOG_FILE

    ## < FOLDER CREATE >
#    if [ ! -d $L_ACTION_LOG_PATH ]; then
#        mkdir $L_ACTION_LOG_PATH
#        chmod 777 $L_ACTION_LOG_PATH
#    fi

####    ## < ACTION LOG OUTPUT >
####    L_LOG_HEADER="[ "$L_ACTION_DTIME" Start job ] -->> "
####    L_JOB_INFO="Module : "$L_JOB_MODULE" , JobID : "$L_JOB_ID
####    echo $L_LOG_HEADER$L_JOB_INFO >> $L_ACTION_LOG_FPATH

    local L_JOB_RESULT
    local L_JOB_STIME
    local L_JOB_ETIME
    local L_JOB_EDIT_STIME
    local L_JOB_EDIT_ETIME

    L_JOB_RESULT=$1
    L_JOB_STIME=$2
    L_JOB_ETIME=$3

    L_JOB_EDIT_STIME=${L_JOB_STIME:0:10}" "${L_JOB_STIME:16:8}
    L_JOB_EDIT_ETIME=${L_JOB_ETIME:0:10}" "${L_JOB_ETIME:16:8}
    L_JOB_EDIT_STIME=`date "+%Y/%m/%d %I:%M:%S" -d "${L_JOB_EDIT_STIME}"`
    L_JOB_EDIT_ETIME=`date "+%Y/%m/%d %I:%M:%S" -d "${L_JOB_EDIT_ETIME}"`

    echo  -n $L_JOB_ID"	"
    echo  -n $L_JOB_NAME"	"
    echo  -n $L_JOB_RESULT"	"
    echo  -n $L_JOB_EDIT_STIME"	"
    echo     $L_JOB_EDIT_ETIME
}

#-------------------------------------------------------------------------------
#@SEE < ICONV FUNCTION SETUP >
#@SEE   1.F_EUCTOUTF   : EUC        --> UTF8
#@SEE        argument  : $* = iconv file
#@SEE   2.F_UTFTOEUC   : UTF8       --> EUC
#@SEE        argument  : $* = iconv file
#@SEE   3.F_SJISTOUTF  : Shift_JIS  --> UTF8
#@SEE        argument  : $* = iconv file
#@SEE   4.F_UTFTOSJIS  : UTF8       --> Shift_JIS
#@SEE        argument  : $* = iconv file
#-------------------------------------------------------------------------------
function F_EUCTOUTF() {
    iconv -f EUCJP-WIN -t UTF-8 $*;
}
function F_UTFTOEUC() {
    iconv -f UTF-8 -t EUCJP-WIN $*;
}
function F_SJISTOUTF() {
    iconv -f SJIS-WIN -t UTF-8 $*;
}
function F_UTFTOSJIS() {
    iconv -f UTF-8 -t SJIS-WIN $*;
}

#-------------------------------------------------------------------------------
#@SEE < JAVA BATCH EXECUTE FUNCTION SETUP >
#@SEE   1.F_JAVA_BATCH_EXEC : Java Batch Start Function
#@SEE        argument       : $* = Job Id + parameter[n]
#-------------------------------------------------------------------------------
function F_JAVA_BATCH_EXEC() {

    local L_JOB_ID=$1
    shift
    local L_BATCH_PARM=$(echo "$*" | sed 's/:/=/g')  # コロンをイコールに置き換える
    local R_STATUS

    ## < DEBUG LOG MODE >
    if [ $L_DEBUG_PROC = "ON" ]; then
        export JAVA_BATCH_DEBUG_LOG_MODE="TRUE"
    else
        export JAVA_BATCH_DEBUG_LOG_MODE="FALSE"
    fi

    ## < EXECUTE JAVA BATCH >
    java -jar /app/app.jar --spring.profiles.active=production --spring.batch.job.name=${L_JOB_ID} ${L_BATCH_PARM}

    R_STATUS=$?

    return $R_STATUS
}

#-------------------------------------------------------------------------------
#@SEE < LOG FUNCTION SETUP >
#@SEE   1.F_JOBLOG_JS  : log output start message
#@SEE        argument  : $1 = log file path
#@SEE        argument  : $2 = job id
#@SEE        argument  : $3 = start time('+%Y-%m-%d %a %T')
#@SEE        argument  : $4 = job name
#@SEE   2.F_JOBLOG_JE  : log output end.. message
#@SEE        argument  : $1 = log file path
#@SEE        argument  : $2 = job id
#@SEE        argument  : $3 = "SUCCESS" or "FAILURE"
#@SEE        argument  : $4 = start time('+%Y-%m-%d %a %T')
#@SEE        argument  : $5 = end.. time('+%Y-%m-%d %a %T')
#@SEE   3.F_JOBLOG_JBS : log output block start message
#@SEE        argument  : $1 = log file path
#@SEE        argument  : $2 = block id
#@SEE        argument  : $3 = block comment
#@SEE   4.F_JOBLOG_JBE : log output block end message
#@SEE        argument  : $1 = log file path
#@SEE        argument  : $2 = block id
#@SEE        argument  : $3 = block status
#@SEE   5.F_JOBLOG_JI  : log output env. information message
#@SEE        argument  : $1 = log file path
#-------------------------------------------------------------------------------
function F_JOBLOG_JS() {
    # < Line 1 >
    echo    ""
    echo    "<< "$4" >>"
    # < Line 2 >
    echo -n "****************************************"
    echo    "****************************************"
    # < Line 3 >
    echo -n "* START TIME=("$3
    echo -n ")"
    echo -n "                     "
    echo -n "  JOB ID=("
    echo -n $2
    echo    ") *"
    # < Line 4 >
    echo -n "****************************************"
    echo    "****************************************"
    # < End Of Line >
    echo    ""
}

function F_JOBLOG_JE() {
    local L_JOB_MODULE
    local L_MAIL_ID
    local L_MAIL_CTL_KEY1
    local L_MAIL_CTL_KEY2
    local L_MAIL_CTL_KEY3
    local L_MAIL_CTL_KEY4
    local L_MAIL_CTL_KEY5

    # < Line 1 >
    echo -n "****************************************"
    echo    "****************************************"
    # < Line 2 >
    case $3 in
        SUCCESS)
            echo -n "*                                       "
            echo    "                                       *"
            ;;
        FAILURE)
            echo -n "*                                       "
            echo    "                         ************* *"
            ;;
        *)
            echo -n "*                                       "
            echo    "                         ************* *"
            ;;
    esac
    # < Line 3 >
    case $3 in
        SUCCESS)
            echo -n "* < JOB ID=("
            echo -n $2
            echo -n ")"
            echo -n " >                  "
            echo -n "                    "
            echo -n "    -  "
            echo -n $3
            echo    "  - *"
            ;;
        FAILURE)
            echo -n "* < JOB ID=("
            echo -n $2
            echo -n ")"
            echo -n " >                  "
            echo -n "                    "
            echo -n "    *  "
            echo -n $3
            echo    "  * *"
            ;;
        *)
            echo -n "* < JOB ID=("
            echo -n $2
            echo -n ")"
            echo -n " >                  "
            echo -n "                    "
            echo -n "    *  "
            echo -n $3
            echo    "  * *"
            ;;
    esac
    # < Line 4 >
    case $3 in
        SUCCESS)
            echo -n "*                                       "
            echo    "                                       *"
            ;;
        FAILURE)
            echo -n "*                                       "
            echo    "                         ************* *"
            ;;
        *)
            echo -n "*                                       "
            echo    "                         ************* *"
            ;;
    esac
    # < Line 5 >
    echo -n "*  START TIME       "
    echo -n "         END TIME   "
    echo -n "                    "
    echo    "                   *"
    # < Line 6 >
    echo -n "*  "$4
    echo -n " - "$5
    echo    " ["$3"] @JOB=("$2") *"
    # < Line 7 >
    echo -n "****************************************"
    echo    "****************************************"
    # < End Of Line >
    echo    ""
    # < Mail send >
    if [ $3 = "FAILURE" ]; then
        if [ $L_ABEND_MAIL_PROC = "ON" -a $L_MAIL_PROC = "ON" ]; then

            L_JOB_MODULE="LZ"
            L_MAIL_ID="ABEND_MAIL"
            L_MAIL_CTL_KEY1=`echo $L_MODULE | tr '[a-z]' '[A-Z]'`
            L_MAIL_CTL_KEY2=" "
            L_MAIL_CTL_KEY3=" "
            L_MAIL_CTL_KEY4=" "
            L_MAIL_CTL_KEY5=" "

            F_MAIL_SEND       "$L_JOB_MODULE"    \
                              "$L_MAIL_ID"       \
                              "$L_MAIL_CTL_KEY1" \
                              "$L_MAIL_CTL_KEY2" \
                              "$L_MAIL_CTL_KEY3" \
                              "$L_MAIL_CTL_KEY4" \
                              "$L_MAIL_CTL_KEY5" \
                              "[$L_GET_HOST]ABEND_$2($L_JOB_NAME)" \
                              "$L_LOG_FPATH"

            # < Status Set >
            L_MAIL_SEND_STATUS=$?                        ##(DOC) Status Keeping

#            < Step End Log Output >
            if [ $L_MAIL_SEND_STATUS -ne $R_SUCCESS ]; then
                F_JOBLOG_JBE $L_LOG_FPATH $L_PG_ID $L_MAIL_SEND_STATUS
            fi
        fi
    elif [ $3 = "WARNING" ]; then
        if [ $L_MAIL_PROC = "ON" ]; then
            L_JOB_MODULE="LZ"
            L_MAIL_ID="WARNING_M"
            L_MAIL_CTL_KEY1=`echo $L_MODULE | tr '[a-z]' '[A-Z]'`
            L_MAIL_CTL_KEY2=" "
            L_MAIL_CTL_KEY3=" "
            L_MAIL_CTL_KEY4=" "
            L_MAIL_CTL_KEY5=" "

            F_MAIL_SEND       "$L_JOB_MODULE"    \
                              "$L_MAIL_ID"       \
                              "$L_MAIL_CTL_KEY1" \
                              "$L_MAIL_CTL_KEY2" \
                              "$L_MAIL_CTL_KEY3" \
                              "$L_MAIL_CTL_KEY4" \
                              "$L_MAIL_CTL_KEY5" \
                              "[$L_GET_HOST]WARNING_$2($L_JOB_NAME)" \
                              "$L_LOG_FPATH"

            # < Status Set >
            L_MAIL_SEND_STATUS=$?                        ##(DOC) Status Keeping

#            < Step End Log Output >
            if [ $L_MAIL_SEND_STATUS -ne $R_SUCCESS ]; then
                F_JOBLOG_JBE $L_LOG_FPATH $L_PG_ID $L_MAIL_SEND_STATUS
            fi
        fi
    fi

    ## < ACTION LOG OUTPUT >
    F_ACTION_LOG $3 $L_JOB_STIME $L_JOB_ETIME

}
function F_JOBLOG_JI() {
    # < Line 1 >
    echo -n "----------------------------------------"
    echo    "----------------------------------------"
    # < Line 2 >
    echo    " [ Environment Information ]"
    # < Line 3 >
    echo -n "----------------------------------------"
    echo    "----------------------------------------"
    # < Env. Info. >
    echo "    GET HOST     [ "$L_GET_HOST" ]"
    echo "    GET USER     [ "$L_GET_USER" ]"
    echo "    SYSTEM UID   [ "$L_SYS_UID" ]"
    echo "    DATABASE     [ "$L_DB_NAME" ]"
    echo "    PYMAC  ENV   [ "$L_YNS_ENV_FPATH" ]"
    echo "    FUNCTION ENV [ "$L_FUNCTION_ENV_FPATH" ]"
    echo "    MODULE ENV   [ "$L_MODULE_ENV_FPATH" ]"
    echo "    LOG   PATH   [ "$L_LOG_FPATH" ]"
    echo "    SHELL PATH   [ "$0" ]"
    echo "    PROCESS ID   [ "$$" ]"
    echo "    OPE BASE     [ "$L_SYS_BASE" ]"
    echo "    OWNER CODE   [ "$L_SYS_OWNER_CD" ]"
    echo "    FILE PROC    [ "$L_FILE_PROC" ]"
    echo "    MAIL PROC    [ "$L_MAIL_PROC" ]"
    echo "    LIST PROC    [ "$L_LIST_PROC" ]"
    echo "    DEBUG PROC   [ "$L_DEBUG_PROC" ]"
    # < End Of Line >
    echo ""
}

function F_JOBLOG_JBS() {
    # < Line 1 >
    echo -n "----------------------------------------"
    echo    "---------- ( "`date '+%Y-%m-%d %a %T'`" ) -"
    # < Line 2 >
    echo    " [ Program Execution : "$2" ] COMMENT : "$3
    # < Line 3 >
    echo -n "----------------------------------------"
    echo    "----------------------------------------"
}
function F_JOBLOG_JBE() {
    # < Line 1 >
    echo -n "----------------------------------------"
    echo    "---------- ( "`date '+%Y-%m-%d %a %T'`" ) -"
    # < Line 2 >
    echo    " [ TERMINATE EXECUTION OF A PROGRAM : "$2" ] STATUS : "$3
    # < Line 3 >
    echo -n "----------------------------------------"
    echo    "----------------------------------------"
    # < End Of Line >
    echo ""
}

#-------------------------------------------------------------------------------
#@SEE < SQL FILE EXECUTE FUNCTION SETUP >
#@SEE   1.F_SQL_FILE_EXEC : SQL FILE Start Function
#@SEE        argument     : $* = execute files
#-------------------------------------------------------------------------------
function F_SQL_FILE_EXEC() {
for ARG in $*
do
    psql -f $ARG $L_DB_NAME
done
}

#-------------------------------------------------------------------------------
#@SEE < SQL COMMAND EXECUTE FUNCTION SETUP >
#@SEE   1.F_SQL_COMMAND_EXEC : SQL Command Start Function
#@SEE        argument        : $* = sql command
#-------------------------------------------------------------------------------
function F_SQL_COMMAND_EXEC() {
    psql -q -c "$*" $L_DB_NAME
}

#-------------------------------------------------------------------------------
#@SEE < TABLE VACUUM FUNCTION SETUP >
#@SEE   1.F_VACUUM      : Table Vacuum Analyze Function
#@SEE        argument   : $1 = vacuum table name
#-------------------------------------------------------------------------------
function F_VACUUM() {
   psql -q -c "VACUUM ANALYZE $1;" $L_DB_NAME
}

#-------------------------------------------------------------------------------
#@SEE < TABLE VACUUM ONLY FUNCTION SETUP >
#@SEE   1.F_VACUUM_ONLY : Table Vacuum Only Function
#@SEE        argument   : $1 = vacuum table name
#-------------------------------------------------------------------------------
function F_VACUUM_ONLY() {
   psql -q -c "VACUUM $1;" $L_DB_NAME
}

#-------------------------------------------------------------------------------
#@SEE < TABLE ANALYZE ONLY FUNCTION SETUP >
#@SEE   1.F_ANALYZE_ONLY : Table Analyze Only Function
#@SEE        argument   : $1 = Analyze table name
#-------------------------------------------------------------------------------
function F_ANALYZE_ONLY() {
   psql -q -c "ANALYZE $1;" $L_DB_NAME
}

#-------------------------------------------------------------------------------
#@SEE < TABLE DATA LOAD FUNCTION SETUP >
#@SEE   1.F_DATA_LOAD  : Table Data Load (Variable-length) Function
#@SEE        argument  : $1 = load table name
#@SEE        argument  : $2 = load file path
#-------------------------------------------------------------------------------
function F_DATA_LOAD() {

    local R_STATUS=0
    local L_SUCCESS=0

    psql -q -c "\copy $1 from $2 with delimiter as '|' null as '[null]' ;" $L_DB_NAME >> $L_LOG_FPATH 2>&1
    R_STATUS=$?

     if [ $R_STATUS -eq $L_SUCCESS ]; then
         F_ANALYZE_ONLY $1 >> $L_LOG_FPATH 2>&1
##(DEL) 2013.02.08 ->         F_VACUUM $1 >> $L_LOG_FPATH 2>&1
         R_STATUS=$?
     fi

    return $R_STATUS
}

#-------------------------------------------------------------------------------
#@SEE < TABLE DATA UNLOAD FUNCTION SETUP >
#@SEE   1.F_DATA_UNLOAD : Table Data Unload (Variable-length) Function
#@SEE        argument   : $1 = unload table name
#@SEE        argument   : $2 = unload file path
#-------------------------------------------------------------------------------
function F_DATA_UNLOAD() {
   psql -q -c "\copy (select * from $1) to $2 with delimiter as '|' null as '[null]' ;" $L_DB_NAME
}

#-------------------------------------------------------------------------------
#@SEE < TABLE DATA LOAD FUNCTION SETUP >
#@SEE   1.F_DATA_LOAD_BLANK_NULL  : Table Data Load (Variable-length) Function
#@SEE        argument  : $1 = load table name
#@SEE        argument  : $2 = load file path
#-------------------------------------------------------------------------------
function F_DATA_LOAD_BLANK_NULL() {

    local R_STATUS=0
    local L_SUCCESS=0

    psql -q -c "\copy $1 from $2 with delimiter as '|' null as '' ;" $L_DB_NAME >> $L_LOG_FPATH 2>&1
    R_STATUS=$?

    if [ $R_STATUS -eq $L_SUCCESS ]; then
        F_ANALYZE_ONLY $1 >> $L_LOG_FPATH 2>&1
##(DEL) 2013.02.08 ->        F_VACUUM $1 >> $L_LOG_FPATH 2>&1
        R_STATUS=$?
    fi

    return $R_STATUS
}

#-------------------------------------------------------------------------------
#@SEE < TABLE DATA UNLOAD FUNCTION SETUP >
#@SEE   1.F_DATA_UNLOAD_BLANK_NULL : Table Data Unload (Variable-length) Function
#@SEE        argument   : $1 = unload table name
#@SEE        argument   : $2 = unload file path
#-------------------------------------------------------------------------------
function F_DATA_UNLOAD_BLANK_NULL() {
   psql -q -c "\copy (select * from $1) to $2 with delimiter as '|' null as '' ;" $L_DB_NAME
}

#-------------------------------------------------------------------------------
#@SEE < MAIL SEND FUNCTION SETUP >
#@SEE   1.F_MAIL_SEND  : Mail Send Function
#@SEE        argument  : $1 = System Code
#@SEE        argument  : $2 = Mail id Code
#@SEE        argument  : $3 = Control Key1
#@SEE        argument  : $4 = Control Key2
#@SEE        argument  : $5 = Control Key3
#@SEE        argument  : $6 = Control Key4
#@SEE        argument  : $7 = Control Key5
#@SEE        argument  : $8 = メールタイトル（任意）
#@SEE        argument  : $9 = メッセージファイルパス（任意）
#-------------------------------------------------------------------------------
function F_MAIL_SEND() {

    local L_PG_ID="LZTJ0002"
    local L_PG_BEAN_ID="Lztj0002BatchReadOnly"
    local L_PG_LOG="logf:"$L_LOG_FPATH
    local L_PG_ARG0="arg0:"$0
    local L_PG_ARG1="arg1:"$1
    local L_PG_ARG2="arg2:"$2
    local L_PG_ARG3="arg3:"$3
    local L_PG_ARG4="arg4:"$4
    local L_PG_ARG5="arg5:"$5
    local L_PG_ARG6="arg6:"$6
    local L_PG_ARG7="arg7:"${7//:/_}
    local L_PG_ARG8="arg8:"$8

    # < Common Java Batch Call >
    F_COMMON_JAVA_BATCH_EXEC $L_PG_ID           \
                             $L_PG_BEAN_ID      \
                             $L_PG_LOG          \
                             $L_PG_ARG0         \
                             $L_PG_ARG1         \
                             $L_PG_ARG2         \
                             $L_PG_ARG3         \
                             $L_PG_ARG4         \
                             $L_PG_ARG5         \
                             $L_PG_ARG6         \
                             ${L_PG_ARG7// /_}  \
                             $L_PG_ARG8

    R_STATUS=$?

    return $R_STATUS
}

#-------------------------------------------------------------------------------
#@SEE < OPERATION STATUS CHANGE FUNCTION SETUP >
#@SEE   1.F_OPE_STATE_CHANGE  : Operation Status Change Fucntion
#@SEE        argument  : $1 = System Code
#@SEE        argument  : $2 = Change After Status
#-------------------------------------------------------------------------------
function F_OPE_STATE_CHANGE() {

    local L_PG_ID="LZAJ0001"
    local L_PG_BEAN_ID="Lzaj0001BatchReadWrite"
    local L_PG_LOG="logf:"$L_LOG_FPATH
    local L_PG_ARG0="arg0:M"
    local L_PG_ARG1="arg1:"$1
    local L_PG_ARG2="arg2:"$2

    # < Common Java Batch Call >
    F_COMMON_JAVA_BATCH_EXEC $L_PG_ID      \
                             $L_PG_BEAN_ID \
                             $L_PG_LOG     \
                             $L_PG_ARG0    \
                             $L_PG_ARG1    \
                             $L_PG_ARG2    
    R_STATUS=$?

    return $R_STATUS
}

#-------------------------------------------------------------------------------
#@SEE < TABLE BACKUP FUNCTION SETUP >
#@SEE   1.F_TABLE_BACKUP  : Table Backup Fucntion
#@SEE        argument     : $1 = Cycle(Common or Module)
#@SEE        argument     : $2 = To Unload Path
#@SEE        argument     : $3 = Compress Option(0:Compress, 1:Uncompress)
#@SEE        argument     : $4 = Error Option(0:Abend, 1:Error Table Skip)
#-------------------------------------------------------------------------------
function F_TABLE_BACKUP() {

    local R_STATUS=0
    local L_SUCCESS=0

    local L_BACKUP_LIST="backup_table_list.sql_"$L_JOB_ID"_`date +%Y%m%d%H%M%S`"
    local L_BACKUP_LIST_FPATH=$2"/"$L_BACKUP_LIST

    local L_PG_ID="LZTJ0004"
    local L_PG_COMMENT="Backup tables list output"
    local L_PG_BEAN_ID="Lztj0004BatchReadOnly"
    local L_PG_LOG="logf:"$L_LOG_FPATH
    local L_PG_ARG0="arg0:LZ"
    local L_PG_ARG1="arg1:LZT01"
    local L_PG_ARG2="arg2:"$1
    local L_PG_ARG3="outf:"$L_BACKUP_LIST_FPATH

    # < Start Log Output >
    F_JOBLOG_JBS $L_LOG_FPATH $L_PG_ID "$L_PG_COMMENT"

    # < Unload Table List Output >
    F_COMMON_JAVA_BATCH_EXEC $L_PG_ID      \
                             $L_PG_BEAN_ID \
                             $L_PG_LOG     \
                             $L_PG_ARG0    \
                             $L_PG_ARG1    \
                             $L_PG_ARG2    \
                             $L_PG_ARG3
    R_STATUS=$?

    if [ $R_STATUS -eq $L_SUCCESS ]; then

        local L_PG_ID="F_DATA_UNLOAD"
        local L_PG_COMMENT="Table data backup"

        # < Start Log Output >
        F_JOBLOG_JBS $L_LOG_FPATH $L_PG_ID "$L_PG_COMMENT"

        # < Table Data Unload >
        for L_BACKUP_TABLE in $(cat $L_BACKUP_LIST_FPATH)
        do
            # < Function Parameter Set >
            L_BACKUP_FPATH=$2"/"$L_BACKUP_TABLE".bak_`date +%Y%m%d%H%M%S`"

            # < Unload Start Time >
            local L_UNL_START_DTIME=`date +%Y'/'%m'/'%d' '%H':'%M':'%S`
            local L_UNL_START_STIME=`date +%s`

            # < Unload Start Time Log >
            echo "    [ $L_BACKUP_TABLE ]"                      >> $L_LOG_FPATH
            echo "        Output File: $L_BACKUP_FPATH"         >> $L_LOG_FPATH
            echo "         Start Time: $L_UNL_START_DTIME"      >> $L_LOG_FPATH

            # < Table Data Unload Function Call >
            F_DATA_UNLOAD $L_BACKUP_TABLE  \
                          $L_BACKUP_FPATH

            R_STATUS=$?

            # < Status Judgment >
            if [ $R_STATUS -eq $L_SUCCESS ]; then
                if [ "$3" != "1" ]; then
                    gzip $L_BACKUP_FPATH
                fi

                # < Unload End Time >
                local L_UNL_END_DTIME=`date +%Y'/'%m'/'%d' '%H':'%M':'%S`
                local L_UNL_END_STIME=`date +%s`

                # < Elapsed Time >
                local L_SS=`expr $L_UNL_END_STIME - $L_UNL_START_STIME`
                local L_HH=`expr $L_SS / 3600`
                local L_SS=`expr $L_SS % 3600`
                local L_MM=`expr $L_SS / 60`
                local L_SS=`expr $L_SS % 60`

                # < Unload End Time Log >
                echo "           End Time: $L_UNL_END_DTIME"  \
                     "     Total Time: $L_HH:$L_MM:$L_SS (h:m:s)"       >> $L_LOG_FPATH
            else
                if [ "$4" = "1" ]; then
                    echo "           End Time: ***** Error Skip *****"  >> $L_LOG_FPATH

                    R_STATUS=0
                else
                    break
                fi
            fi
        done
    fi

    # < Step End Log Output >
    if [ $R_STATUS -ne $L_SUCCESS ]; then
        F_JOBLOG_JBE $L_LOG_FPATH $L_PG_ID $R_STATUS
    fi

    return $R_STATUS
}

#-------------------------------------------------------------------------------
#@SEE < TABALE DATA BULK DELETE FUNCTION SETUP >
#@SEE   1.F_TABLE_BULK_DELETE  : Delete all data table function
#@SEE        argument          : $1 = Cycle(Common or Module)
#-------------------------------------------------------------------------------
function F_TABLE_BULK_DELETE() {

    local L_PG_ID="LZTJ0001"
    local L_PG_BEAN_ID="Lztj0001BatchReadWrite"
    local L_PG_LOG="logf:"$L_LOG_FPATH
    local L_PG_ARG0="arg0:2"
    local L_PG_ARG1="arg1:"
    local L_PG_ARG2="arg2:LZ"
    local L_PG_ARG3="arg3:LZT02"
    local L_PG_ARG4="arg4:$1"

    # < Common Java Batch Call >
    F_COMMON_JAVA_BATCH_EXEC $L_PG_ID      \
                             $L_PG_BEAN_ID \
                             $L_PG_LOG     \
                             $L_PG_ARG0    \
                             $L_PG_ARG1    \
                             $L_PG_ARG2    \
                             $L_PG_ARG3    \
                             $L_PG_ARG4

    R_STATUS=$?

    return $R_STATUS
}
#-------------------------------------------------------------------------------
#@SEE < TABLE BACKUP ARCHIVE FUNCTION SETUP >
#@SEE   1.F_TBL_BACKUP_ARCHIVE  : Move table backup to archive function
#@SEE        argument           : $1 = Cycle(Common or Module)
#@SEE        argument           : $2 = number of holding generations
#-------------------------------------------------------------------------------
function F_TBL_BACKUP_ARCHIVE() {

    local R_STATUS=0
    local L_SUCCESS=0

    local L_CYCLE_CD=$1
    local L_GENERATION=$2

    local L_YNS_DATE
    local L_UNLOAD_PATH
    local L_ARC_PATH
    local L_DATE
    local L_DATE_ARRAY

    L_YNS_DATE=`psql -A -t -R -q -c "SELECT gimac_date FROM lz_gimac_date;" $L_DB_NAME` >> $L_LOG_FPATH 2>&1

    if [ ${#L_YNS_DATE} -eq 8 ]; then
        echo "**** GIMAC DATE :" $L_YNS_DATE "****"  >> $L_LOG_FPATH
        echo ""                                        >> $L_LOG_FPATH
    else
        echo "**** GIMAC DATE SELECT ERROR ****"       >> $L_LOG_FPATH
        R_STATUS=1
    fi

    if [ $R_STATUS -eq $L_SUCCESS ]; then

        L_UNLOAD_PATH=$L_BDIR_DATA_TABLE"/"$L_CYCLE_CD
        L_ARC_PATH=$L_BDIR_ARC_DATA_TABLE"/"$L_CYCLE_CD

        mkdir -p $L_UNLOAD_PATH
        mkdir -p $L_ARC_PATH"/"$L_YNS_DATE

        gzip -f $L_UNLOAD_PATH/*.*  > /dev/null 2>&1

        cp -f $L_UNLOAD_PATH/*.* $L_ARC_PATH"/"$L_YNS_DATE/ >> $L_LOG_FPATH 2>&1
        R_STATUS=$?
    fi

    if [ $R_STATUS -eq $L_SUCCESS ]; then

        rm -f  $L_UNLOAD_PATH/*.* >> $L_LOG_FPATH 2>&1

        echo "Newest "$L_CYCLE_CD"/"$L_YNS_DATE " Moved."  >> $L_LOG_FPATH

        cd $L_ARC_PATH
        L_DATE=`ls -d -r [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]`
        L_DATE_ARRAY=($L_DATE)

        for (( i = 0; i < ${#L_DATE_ARRAY[@]}; ++i ))
        do
            if [ $i -ge $L_GENERATION ]; then

                rm -rf ${L_DATE_ARRAY[i]}

                echo "Oldest "$L_CYCLE_CD"/"${L_DATE_ARRAY[i]} " Deleted."  >> $L_LOG_FPATH
                echo ""  >> $L_LOG_FPATH
            fi
        done
    fi

    return $R_STATUS
}
#-------------------------------------------------------------------------------
#@SEE < TABLE TRUNCATE FUNCTION SETUP >
#@SEE   1.F_TRUNCATE  : Table Truncate Function
#@SEE        argument  : $1 = Table Name
#-------------------------------------------------------------------------------
function F_TRUNCATE() {
    local L_TABLE_NAME=$1

    psql -c "TRUNCATE TABLE $L_TABLE_NAME;" $L_DB_NAME >> $L_LOG_FPATH 2>&1
    R_STATUS=$?

    return $R_STATUS
}
#-------------------------------------------------------------------------------
#@SEE < TABLE TRUNCATE AND LOAD FUNCTION SETUP >
#@SEE   1.F_TRUNCATE_AND_LOAD : Truncate table, handle indexes, and load data
#@SEE        argument         : $1 = Table Name
#@SEE        argument         : $2 = Load File Path
#@SEE        argument         : $3 = Index Option (0:No, 1:Yes)
#@SEE        argument         : $4 = Index Info Output File Path
#-------------------------------------------------------------------------------
function F_TRUNCATE_AND_LOAD() {
    local L_TABLE_NAME=$1
    local L_LOAD_FILE=$2
    local L_INDEX_OPT=$3
    local L_INDEX_INFO_FILE=$4
    local R_STATUS=0

    if [ "$L_INDEX_OPT" = "1" ]; then
        psql -q -A -t -c "SELECT indexname, indexdef FROM pg_indexes WHERE tablename = lower('$L_TABLE_NAME');" $L_DB_NAME > "$L_INDEX_INFO_FILE"
        R_STATUS=$?
        if [ $R_STATUS -ne 0 ]; then
            echo "Failed to save index info." >> $L_LOG_FPATH
            return $R_STATUS
        fi

        while IFS='|' read -r indexname indexdef; do
            if [ -n "$indexname" ]; then
                psql -q -c "DROP INDEX IF EXISTS \"$indexname\";" $L_DB_NAME >> $L_LOG_FPATH 2>&1
            fi
        done < "$L_INDEX_INFO_FILE"

        F_TRUNCATE "$L_TABLE_NAME"

        while IFS='|' read -r indexname indexdef; do
            if [ -n "$indexdef" ]; then
                psql -q -c "$indexdef;" $L_DB_NAME >> $L_LOG_FPATH 2>&1
            fi
        done < "$L_INDEX_INFO_FILE"

        F_ANALYZE_ONLY "$L_TABLE_NAME"
    else
        F_TRUNCATE "$L_TABLE_NAME"
    fi

    F_DATA_LOAD "$L_TABLE_NAME" "$L_LOAD_FILE"
    R_STATUS=$?

    return $R_STATUS
}
